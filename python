import requests
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Fetch the HTML content
def get_html(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        print(f"Failed to retrieve the webpage. Status code: {response.status_code}")
        return None

url = "https://results.eci.gov.in/"
html_content = get_html(url)
if html_content:
    soup = BeautifulSoup(html_content, 'html.parser')
    print("HTML content fetched successfully.")
else:
    print("Failed to fetch HTML content.")

# Step 2: Parse the table
def parse_results_table(soup, table_id_or_class):
    table = soup.find('table', {'id': table_id_or_class}) or soup.find('table', {'class': table_id_or_class})
    if not table:
        print(f"Table with id or class '{table_id_or_class}' not found.")
        return None

    headers = [th.text.strip() for th in table.find('tr').find_all('th')]
    rows = []
    for tr in table.find_all('tr')[1:]:
        cells = [td.text.strip() for td in tr.find_all('td')]
        rows.append(cells)
    return pd.DataFrame(rows, columns=headers)

# Replace 'resultsTable' with the actual table ID or class identified in Step 1
table_id_or_class = 'resultsTable'
election_results_df = parse_results_table(soup, table_id_or_class)
if election_results_df is not None:
    print("Table parsed successfully.")
    print(election_results_df.head())
else:
    print("Failed to parse the table.")

# Step 3: Data Cleaning
if election_results_df is not None:
    try:
        election_results_df.dropna(inplace=True)
        election_results_df['Votes'] = election_results_df['Votes'].str.replace(',', '').astype(int)
        election_results_df['Winning Margin'] = election_results_df['Winning Margin'].str.replace(',', '').astype(int)
        print("Data cleaning successful.")
    except Exception as e:
        print(f"Data cleaning failed: {e}")
else:
    print("Data cleaning skipped as DataFrame is not defined.")

# Step 4: Data Analysis
if election_results_df is not None:
    try:
        party_seats = election_results_df['Party'].value_counts()
        total_votes = election_results_df['Votes'].sum()
        average_turnout = election_results_df['Votes'].mean()
        closest_contests = election_results_df.nsmallest(5, 'Winning Margin')
        largest_victories = election_results_df.nlargest(5, 'Winning Margin')
        gender_representation = election_results_df['Candidate Gender'].value_counts()
        print("Data analysis successful.")
    except Exception as e:
        print(f"Data analysis failed: {e}")
else:
    print("Data analysis skipped as DataFrame is not defined.")

# Step 5: Data Visualization
if election_results_df is not None:
    try:
        # Bar chart for party-wise seats
        plt.figure(figsize=(10, 6))
        sns.barplot(x=party_seats.index, y=party_seats.values)
        plt.title('Total Seats Won by Each Party')
        plt.xlabel('Party')
        plt.ylabel('Seats Won')
        plt.xticks(rotation=45)
        plt.show()

        # Pie chart for gender representation
        plt.figure(figsize=(8, 8))
        gender_representation.plot.pie(autopct='%1.1f%%', startangle=140)
        plt.title('Gender Representation')
        plt.ylabel('')
        plt.show()

        # Bar chart for voter turnout
        plt.figure(figsize=(10, 6))
        sns.barplot(x=election_results_df['Constituency'], y=election_results_df['Votes'])
        plt.title('Voter Turnout by Constituency')
        plt.xlabel('Constituency')
        plt.ylabel('Votes')
        plt.xticks(rotation=90)
        plt.show()

        print("Data visualization successful.")
    except Exception as e:
        print(f"Data visualization failed: {e}")
else:
    print("Data visualization skipped as DataFrame is not defined.")

# Step 6: Reporting
if election_results_df is not None:
    try:
        report_content = f"""
        # Lok Sabha Election Results Analysis

        ## Key Insights

        1. **Overall Election Outcome**:
           - The total seats won by each party are as follows:
           {party_seats.to_string()}

        2. **Voter Turnout**:
           - The total number of votes cast is {total_votes}, with an average turnout of {average_turnout} votes per constituency.

        3. **State-wise Performance**:
           - Detailed analysis of party performance in key states is provided in the report.

        4. **Constituency Analysis**:
           - Constituency X had the highest voter turnout, while Constituency Y had the lowest.

        5. **Margin of Victory**:
           - The closest contest was in Constituency Z, with a winning margin of just {closest_contests.iloc[0]['Winning Margin']} votes.

        6. **New vs. Incumbent Performance**:
           - New candidates won {new_candidate_performance} seats, indicating a trend towards fresh faces in politics.

        7. **Gender Representation**:
           - Female candidates won {gender_representation['Female']} seats, indicating a change in gender representation.

        8. **Swing Analysis**:
           - There was a significant swing towards Party D in Region E, reversing the trend from the previous election.

        9. **Top Performers**:
           - Candidate X received the highest number of votes, while Candidate Y had the highest winning margin.

        10. **Emerging Parties**:
            - Smaller parties like Party F gained traction, winning seats in new constituencies.
        """

        # Save the report
        with open('Lok_Sabha_Election_Results_Report.md', 'w') as file:
            file.write(report_content)

        print("Report generation successful.")
    except Exception as e:
        print(f"Report generation failed: {e}")
else:
    print("Report generation skipped as DataFrame is not defined.")
